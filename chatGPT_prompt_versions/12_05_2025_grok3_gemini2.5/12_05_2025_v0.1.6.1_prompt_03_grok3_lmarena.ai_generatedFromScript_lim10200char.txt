Here's a comprehensive **prompt** you can use with a large language model (LLM) such as GPT-4 to **reproduce the functionality** of your Bash script, optimized for **Linux systems**, focusing on **CPU, memory, and disk I/O efficiency**, with enhanced **structure, readability, and maintainability**.

---

### ✅ Optimized Bash Script Reproduction Prompt (for LLMs)

```text
You are a Linux systems engineer and expert Bash programmer. You are tasked with rewriting a complex Bash script that monitors disk I/O and directory size changes in a specified directory using tools like `find`, `du`, `stat`, and `inotifywait`.

The original script is functional but contains inefficiencies, poor readability, redundant logic, and lacks modular structure. Your goal is to rewrite it in **optimized, clean, and production-friendly Bash**, preserving **all original functionality**, **logic**, **signal handling**, and **output formatting**, but with the following improvements:

---

### 🎯 Objectives:

1. **Preserve Full Functionality**:
   - Signal handling (`SIGINT`, `SIGTERM`) and proper cleanup
   - Directory validation and help menu
   - Initialization of global variables and arrays
   - Directory size calculation (via `find`, `du`, `stat`)
   - Inode and file count metrics
   - Efficient screen output (using `tput`, ANSI codes)
   - Logging and error redirection to `/dev/shm`
   - Paused state handling and user interaction (pressing keys)
   - Dynamic depth-level monitoring of directory
   - Time delay and performance measurement

2. **Optimize for Performance**:
   - Minimize redundant calls to `find`, `du`, and `stat`
   - Avoid deep recursive parsing unless necessary (check filesystem size first)
   - Avoid unnecessary `echo`/`sleep` where not critical
   - Use in-memory variables instead of writing to disk unless required

3. **Modular Structure**:
   - Break the script into **logical functions**
   - Use **local variables** where possible
   - Clearly separate **initialization**, **user input handling**, **metrics gathering**, **display**, and **cleanup**

4. **Readability & Maintainability**:
   - Use consistent indentation and naming
   - Add **clear comments** for each block or function
   - Use arrays and loops wisely
   - Remove unused variables or legacy debug lines

5. **Compatibility**:
   - Should run on Bash 4.x+ on modern Linux distributions
   - Use portable commands (avoid extensions not supported across distros)

---

### 🧠 Original Code Summary:

The original script:
- Accepts a directory as argument
- Validates it (avoids root `/`)
- Displays a help message with ANSI formatting
- Initializes depth-level arrays for directory size tracking
- Calculates size using `find`, `du`, and `stat`
- Measures time delays between operations
- Manages interactive keypress input (pause, quit, help)
- Uses `/dev/shm` for logging (`inotify.lg`, `find_error0.lg`)
- Dynamically adjusts depth level monitoring depending on filesystem size

---

### 🛠️ Requirements for Rewritten Script:

- Reproduce all logic in a **single Bash script**
- Output must be clean and readable in terminal
- Add a `--debug` flag to optionally show internal timings
- Replace magic numbers with named constants
- Include help output (`-h`, `--help`, `-?`, `/?`)
- Create a function like `init_vars` to handle all variable setup
- Ensure **proper error handling** and **graceful exit**
- Include **benchmarking** (e.g., time taken for key operations)
- Use `trap` to handle exit signals and cleanup
- Show accurate size comparison: `du` vs `find` vs `stat`
- If directory is > 35GB (configurable), reduce monitoring depth

---

### 📋 Output Format:

Your response should be:
- A full, optimized Bash script
- Include a top-level comment block summarizing the script
- Organized into clearly labeled functions
- With comments explaining each function’s purpose
- Use `set -euo pipefail` for stricter error handling
- No inline debug `echo` unless behind a debug flag

---

### 📌 Additional Notes:

- You may define constants like:
  ```bash
  readonly HUGEPARTITION_SIZE_GB=35
  readonly TMP_LOG="/dev/shm/inotify.lg"
  ```
- Consider caching results from expensive operations (`find`, `du`)
- Use `bc` or `awk` for floating point math (e.g., time deltas)
- Use `read -r -s -t` with proper fallback for keypress interaction
- Use `tput` for cursor control and screen formatting
- Consider using `printf` over `echo` for consistent formatting

---

### 🔄 Final Output:

Output only the **final, optimized Bash script**, no explanations or markdown formatting. Keep the script under 800 lines if possible. Name the script `dirIO_opt.sh`.

The script should include:
- Help message
- Signal trapping
- All original metrics and logic
- Optimized directory scanning by depth
- Efficient CPU and disk usage
- Clean exit and optional debug mode

---

Now, please generate the optimized version of the script.
```

---

### ✅ Notes for Use:

You can paste this prompt into ChatGPT (or any GPT-4-based LLM) and the model will generate a **clean, structured version of your Bash script** with the same functionality, but optimized and reorganized for better performance and readability.

Let me know if you want me to **generate the actual optimized script** based on this prompt!
