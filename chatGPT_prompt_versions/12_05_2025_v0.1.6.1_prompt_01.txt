Create a bash shell script for Linux that monitors directory I/O activity with the following optimized functionality:

1. REQUIREMENTS:

* Must use inotifywait to monitor file system events
* Track directory size changes at multiple depth levels
* Calculate and display I/O rates and cumulative totals
* Provide interactive controls via keyboard input
* Handle large directories efficiently (>32GB)
* Include signal handling for clean termination

2. OPTIMIZED STRUCTURE:

* Use functions for modular organization:

  * init\_vars() - Initialize all variables and arrays
  * proc\_lgfls() - Process inotify log files
  * monitor\_io() - Track directory size changes
  * calculate\_data\_rate() - Compute I/O metrics
  * graphical\_output() - Display activity visually
  * signal\_handlers() - Cleanup on termination
* Implement efficient file operations:

  * Use find with -mindepth/-maxdepth for level-specific sizing
  * Optimize stat calls for performance
  * Implement log rotation for large files
* Improve variable naming and documentation

3. KEY FEATURES TO MAINTAIN:

* Multiple display modes (text/graphical)
* Depth level navigation (N/n keys)
* Pause/resume functionality
* Help system with key bindings
* Version and diagnostic information
* Efficient handling of:

  * Large directory trees
  * High event volumes
  * System resource constraints

4. IMPROVEMENTS TO IMPLEMENT:

* Better error handling and validation
* More efficient array operations
* Optimized screen updates
* Reduced redundant calculations
* Clearer variable naming
* Comprehensive comments
* Consistent code style

5. OUTPUT REQUIREMENTS:

* Real-time display of:

  * Current directory size
  * I/O rates (MB/s)
  * Cumulative totals
  * Recent file events
  * System resource usage
* Clean, formatted output using tput
* Responsive to terminal resizing

The script should maintain all the functionality of the original while being more maintainable and efficient. Include clear section headers and comments explaining each major component.

Provide the complete optimized bash script implementation that meets these requirements while preserving all the original monitoring capabilities.
